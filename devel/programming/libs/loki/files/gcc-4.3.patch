Index: loki-0.1.6/include/loki/SafeFormat.h
===================================================================
--- loki-0.1.6.orig/include/loki/SafeFormat.h
+++ loki-0.1.6/include/loki/SafeFormat.h
@@ -22,6 +22,8 @@
 ////////////////////////////////////////////////////////////////////////////////
 
 #include <cstdio>
+#include <cstring>
+#include <climits>
 #include <string>
 #include <stdexcept>
 #include <utility>
Index: loki-0.1.6/src/SafeFormat.cpp
===================================================================
--- loki-0.1.6.orig/src/SafeFormat.cpp
+++ loki-0.1.6/src/SafeFormat.cpp
@@ -14,7 +14,7 @@
 
 
 #include <loki/SafeFormat.h>
-
+#include <cstring>
 
 namespace Loki
 {
Index: loki-0.1.6/src/SmallObj.cpp
===================================================================
--- loki-0.1.6.orig/src/SmallObj.cpp
+++ loki-0.1.6/src/SmallObj.cpp
@@ -21,6 +21,7 @@
 #include <cassert>
 #include <vector>
 #include <bitset>
+#include <climits>
 
 //#define DO_EXTRA_LOKI_TESTS
 //#define USE_NEW_TO_ALLOCATE
Index: loki-0.1.6/test/CachedFactory/CachedFactoryTest.cpp
===================================================================
--- loki-0.1.6.orig/test/CachedFactory/CachedFactoryTest.cpp
+++ loki-0.1.6/test/CachedFactory/CachedFactoryTest.cpp
@@ -24,6 +24,7 @@
 #define USE_SEQUENCE
 
 #include <cassert>
+#include <cstring>
 #include <iostream>
 #include <loki/Factory.h>
 
Index: loki-0.1.6/include/loki/CachedFactory.h
===================================================================
--- loki-0.1.6.orig/include/loki/CachedFactory.h
+++ loki-0.1.6/include/loki/CachedFactory.h
@@ -662,7 +662,7 @@ namespace Loki
             public CreationPolicy, public StatisticPolicy, EvictionPolicy< AbstractProduct * , unsigned >
 	 {
      private:
-        typedef Factory< AbstractProduct, IdentifierType, CreatorParmTList, FactoryErrorPolicy> Factory;
+        typedef Factory< AbstractProduct, IdentifierType, CreatorParmTList, FactoryErrorPolicy> CFactory;
         typedef FactoryImpl< AbstractProduct, IdentifierType, CreatorParmTList > Impl;
         typedef Functor< AbstractProduct* , CreatorParmTList > ProductCreator;
         typedef EncapsulationPolicy<AbstractProduct> NP;
@@ -689,16 +689,16 @@ namespace Loki
      public:
         typedef typename NP::ProductReturn ProductReturn;
      private:
-        typedef Key< Impl, IdentifierType > Key;
-        typedef std::map< Key, ObjVector >  KeyToObjVectorMap;
-        typedef std::map< AbstractProduct*, Key >  FetchedObjToKeyMap;
+        typedef Key< Impl, IdentifierType > CKey;
+        typedef std::map< CKey, ObjVector >  KeyToObjVectorMap;
+        typedef std::map< AbstractProduct*, CKey >  FetchedObjToKeyMap;
         
-        Factory             factory;
+        CFactory            factory;
         KeyToObjVectorMap   fromKeyToObjVector;
         FetchedObjToKeyMap  providedObjects;
         unsigned            outObjects;
 
-        ObjVector& getContainerFromKey(Key key){
+        ObjVector& getContainerFromKey(CKey key){
             return fromKeyToObjVector[key];
         }
 
@@ -864,7 +864,7 @@ namespace Loki
 
         ProductReturn CreateObject(const IdentifierType& id)
         {
-            Key key(id);
+            CKey key(id);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -879,7 +879,7 @@ namespace Loki
         ProductReturn CreateObject(const IdentifierType& id,
 				    Parm1 p1)
         {
-            Key key(id,p1);
+            CKey key(id,p1);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -894,7 +894,7 @@ namespace Loki
         ProductReturn CreateObject(const IdentifierType& id,
 				    Parm1 p1, Parm2 p2)
         {
-            Key key(id,p1,p2);
+            CKey key(id,p1,p2);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -909,7 +909,7 @@ namespace Loki
         ProductReturn CreateObject(const IdentifierType& id,
 				    Parm1 p1, Parm2 p2, Parm3 p3)
         {
-            Key key(id,p1,p2,p3);
+            CKey key(id,p1,p2,p3);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -924,7 +924,7 @@ namespace Loki
         ProductReturn CreateObject(const IdentifierType& id,
 				    Parm1 p1, Parm2 p2, Parm3 p3, Parm4 p4)
         {
-            Key key(id,p1,p2,p3,p4);
+            CKey key(id,p1,p2,p3,p4);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -940,7 +940,7 @@ namespace Loki
         ProductReturn CreateObject(const IdentifierType& id,
 				    Parm1 p1, Parm2 p2, Parm3 p3, Parm4 p4, Parm5 p5)
         {
-            Key key(id,p1,p2,p3,p4,p5);
+            CKey key(id,p1,p2,p3,p4,p5);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -957,7 +957,7 @@ namespace Loki
 				    Parm1 p1, Parm2 p2, Parm3 p3, Parm4 p4, Parm5 p5,
 				    Parm6 p6)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6);
+            CKey key(id,p1,p2,p3,p4,p5,p6);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -974,7 +974,7 @@ namespace Loki
 				    Parm1 p1, Parm2 p2, Parm3 p3, Parm4 p4, Parm5 p5,
 				    Parm6 p6, Parm7 p7 )
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -991,7 +991,7 @@ namespace Loki
 				    Parm1 p1, Parm2 p2, Parm3 p3, Parm4 p4, Parm5 p5,
 				    Parm6 p6, Parm7 p7, Parm8 p8)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7,p8);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7,p8);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -1008,7 +1008,7 @@ namespace Loki
 				    Parm1 p1, Parm2 p2, Parm3 p3, Parm4 p4, Parm5 p5,
 				    Parm6 p6, Parm7 p7, Parm8 p8, Parm9 p9)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -1025,7 +1025,7 @@ namespace Loki
 				    Parm1 p1, Parm2 p2, Parm3 p3, Parm4 p4, Parm5 p5,
 				    Parm6 p6, Parm7 p7, Parm8 p8, Parm9 p9,Parm10 p10)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -1043,7 +1043,7 @@ namespace Loki
 				    Parm6  p6, Parm7 p7, Parm8 p8, Parm9 p9, Parm10 p10,
 				    Parm11 p11)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -1061,7 +1061,7 @@ namespace Loki
 				    Parm6  p6,  Parm7  p7, Parm8 p8, Parm9 p9, Parm10 p10,
 				    Parm11 p11, Parm12 p12)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -1079,7 +1079,7 @@ namespace Loki
 				    Parm6  p6,  Parm7  p7,  Parm8  p8, Parm9 p9, Parm10 p10,
 				    Parm11 p11, Parm12 p12, Parm13 p13)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -1098,7 +1098,7 @@ namespace Loki
 				    Parm6  p6,  Parm7  p7,  Parm8  p8,  Parm9  p9, Parm10 p10,
 				    Parm11 p11, Parm12 p12, Parm13 p13, Parm14 p14)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
@@ -1117,7 +1117,7 @@ namespace Loki
 				    Parm6  p6,  Parm7  p7,  Parm8  p8,  Parm9  p9,  Parm10 p10,
 				    Parm11 p11, Parm12 p12, Parm13 p13, Parm14 p14, Parm15 p15)
         {
-            Key key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15);
+            CKey key(id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15);
             AbstractProduct *pProduct(getPointerToObjectInContainer(getContainerFromKey(key)));
             if(shouldCreateObject(pProduct))
             {
Index: loki-0.1.6/test/RegressionTest/AssocVectorTest.h
===================================================================
--- loki-0.1.6.orig/test/RegressionTest/AssocVectorTest.h
+++ loki-0.1.6/test/RegressionTest/AssocVectorTest.h
@@ -18,6 +18,7 @@
 
 #include <cstdio>
 #include <cstdlib>
+#include <cstring>
 #include <ctime>
 #include <loki/AssocVector.h>
 #include "UnitTest.h"
Index: loki-0.1.6/test/SmartPtr/main.cpp
===================================================================
--- loki-0.1.6.orig/test/SmartPtr/main.cpp
+++ loki-0.1.6/test/SmartPtr/main.cpp
@@ -17,6 +17,7 @@
 
 #include <loki/SmartPtr.h>
 
+#include <cstring>
 #include <iostream>
 
 #include "base.h"
@@ -1000,7 +1001,7 @@ void DoForwardReferenceTest( void )
 }
 
 
-int main( unsigned int argc, const char * argv[] )
+int main( int argc, const char * argv[] )
 {
     bool doThreadTest = false;
     for ( unsigned int ii = 1; ii < argc; ++ii )
