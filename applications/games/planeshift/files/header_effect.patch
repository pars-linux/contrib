diff -Naur effects.orig/pseffectanchor.cpp effects/pseffectanchor.cpp
--- src/common/effects.orig/pseffectanchor.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectanchor.cpp	2007-02-23 02:44:16.000000000 +0200
@@ -232,12 +232,12 @@
     while (life > animLength)
         life -= animLength;
 
-    if (keyFrames->Length() == 0)
+    if (keyFrames->GetSize() == 0)
         return true;
 
     currKeyFrame = FindKeyFrameByTime(life);
     nextKeyFrame = currKeyFrame+1;
-    if (nextKeyFrame >= keyFrames->Length())
+    if (nextKeyFrame >= keyFrames->GetSize())
         nextKeyFrame = 0;
 
     // TOTARGET
@@ -362,7 +362,7 @@
     psEffectAnchorKeyFrame * newKeyFrame = new psEffectAnchorKeyFrame();
 
     // if there are no other keys then this is the first frame.
-    if (keyFrames->Length() == 0)
+    if (keyFrames->GetSize() == 0)
         newKeyFrame->SetupFirstFrame();
 
     newKeyFrame->time = time;
@@ -371,12 +371,12 @@
     keyFrames->Push(newKeyFrame);
 
     // return the index where the new keyframe can be found
-    return keyFrames->Length()-1;
+    return keyFrames->GetSize()-1;
 }
 
 size_t psEffectAnchor::FindKeyFrameByTime(float time) const
 {
-    for ( size_t a = keyFrames->Length(); a-- > 0; )
+    for ( size_t a = keyFrames->GetSize(); a-- > 0; )
     {
         if (keyFrames->Get(a)->time < time)
             return a;
@@ -386,7 +386,7 @@
 
 bool psEffectAnchor::FindNextKeyFrameWithAction(size_t startFrame, size_t action, size_t &index) const
 {
-    for (size_t a=startFrame; a<keyFrames->Length(); a++)
+    for (size_t a=startFrame; a<keyFrames->GetSize(); a++)
     {
         if (a == 0 || keyFrames->Get(a)->specAction.IsBitSet(action))
         {
@@ -432,7 +432,7 @@
         // no matter what the interpolation type (as long as we have one), just clamp the end
         if (lerpTypes[k] != psEffectAnchorKeyFrame::IT_NONE)
         {
-            for (b=a+1; b<keyFrames->Length(); ++b)
+            for (b=a+1; b<keyFrames->GetSize(); ++b)
                 keyFrames->Get(b)->actions[k] = keyFrames->Get(a)->actions[k];
         }
     }
diff -Naur effects.orig/pseffectanchor.h effects/pseffectanchor.h
--- src/common/effects.orig/pseffectanchor.h	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectanchor.h	2007-02-23 02:44:16.000000000 +0200
@@ -114,7 +114,7 @@
     /** returns the number of keyframes in the group.
      *   @return the keyframe count
      */
-    size_t Length() const
+    size_t GetSize() const
     { return keyFrames.GetSize(); }
 
     /** returns the keyframe at the given index.
@@ -239,7 +239,7 @@
      *   @return The keyFrame count.
      */
     size_t GetKeyFrameCount() const
-    { return keyFrames->Length(); }
+    { return keyFrames->GetSize(); }
 
     /** Returns the keyframe at the given index.
      *   @param idx The index of the keyframe to grab.
@@ -266,7 +266,7 @@
     /** Gets the animation length of the effect anchor.
      *   @return the animation length.
      */
-    float GetAnimLength() { return animLength; }
+    float GetAnimGetSize() { return animLength; }
 
     /** Creates a new keyframe and attaches it to this movable.
      *   @param time The time of this new keyFrame.
diff -Naur effects.orig/pseffectanchorsocket.cpp effects/pseffectanchorsocket.cpp
--- src/common/effects.orig/pseffectanchorsocket.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectanchorsocket.cpp	2007-02-23 02:44:16.000000000 +0200
@@ -144,12 +144,12 @@
     while (life > animLength)
         life -= animLength;
 
-    if (keyFrames->Length() == 0)
+    if (keyFrames->GetSize() == 0)
         return true;
 
     currKeyFrame = FindKeyFrameByTime(life);
     nextKeyFrame = currKeyFrame + 1;
-    if (nextKeyFrame >= keyFrames->Length())
+    if (nextKeyFrame >= keyFrames->GetSize())
         nextKeyFrame = 0;
 
     // POSITION
diff -Naur effects.orig/pseffectanchorspline.cpp effects/pseffectanchorspline.cpp
--- src/common/effects.orig/pseffectanchorspline.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectanchorspline.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -96,13 +96,13 @@
     while (life > animLength)
         life -= animLength;
 
-    if (keyFrames->Length() == 0)
+    if (keyFrames->GetSize() == 0)
         objTargetOffset = csVector3(0,0,0);
     else
     {
         currKeyFrame = FindKeyFrameByTime(life);
         nextKeyFrame = currKeyFrame+1;
-        if (nextKeyFrame >= keyFrames->Length())
+        if (nextKeyFrame >= keyFrames->GetSize())
             nextKeyFrame = 0;
     
         // TOTARGET
@@ -152,7 +152,7 @@
 {
     int count = 0;
     // fill in the spline according to the position we got from the keyframes
-    for (size_t a=0; a<keyFrames->Length(); ++a)
+    for (size_t a=0; a<keyFrames->GetSize(); ++a)
     {
         if (keyFrames->Get(a)->specAction.IsBitSet(psEffectAnchorKeyFrame::KA_POS_X)
          || keyFrames->Get(a)->specAction.IsBitSet(psEffectAnchorKeyFrame::KA_POS_Y)
diff -Naur effects.orig/pseffect.cpp effects/pseffect.cpp
--- src/common/effects.orig/pseffect.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffect.cpp	2007-02-23 02:44:16.000000000 +0200
@@ -43,6 +43,7 @@
 #include "pseffectobjstar.h"
 #include "pseffectobjtext.h"
 #include "pseffectobjtrail.h"
+#include "pseffectobjdecal.h"
 
 #include "util/log.h"
 #include "util/pscssetup.h"
@@ -166,6 +167,10 @@
             obj = new psEffectObjText(parentView);
         else if (type == "trail")
             obj = new psEffectObjTrail(parentView);
+#ifdef PS_EFFECT_ENABLE_DECAL
+        else if (type == "decal")
+            obj = new psEffectObjDecal(parentView);
+#endif // PS_EFFECT_ENABLE_DECAL
 
         if (obj)
         {
diff -Naur effects.orig/pseffectmanager.cpp effects/pseffectmanager.cpp
--- src/common/effects.orig/pseffectmanager.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectmanager.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -221,7 +221,7 @@
     }
 
     csRef<iStringArray> files = vfs->FindFiles("*");
-    for (size_t a=0; a<files->Length(); ++a)
+    for (size_t a=0; a<files->GetSize(); ++a)
     {
         const char * file = files->Get(a);
         if (file[0] == '.')
diff -Naur effects.orig/pseffectobj.cpp effects/pseffectobj.cpp
--- src/common/effects.orig/pseffectobj.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobj.cpp	2007-02-23 10:40:21.000000000 +0200
@@ -288,6 +288,8 @@
 
     region = engine->GetRegions()->FindByName("effects");
     keyFrames.AttachNew(new psEffectObjKeyFrameGroup);
+
+    baseScale = 1.0f;
 }
 
 psEffectObj::~psEffectObj()
@@ -465,7 +467,8 @@
             matBase = anchorMesh->GetMovable()->GetFullTransform().GetT2O();
     }
 
-    if (keyFrames->Length() == 0)
+	const static csMatrix3 billboardFix = csXRotMatrix3(-3.14f/2.0f);
+    if (keyFrames->GetSize() == 0)
     {
         if (dir == DT_CAMERA)
         {
@@ -477,16 +480,20 @@
         }
         else if (dir == DT_BILLBOARD)
         {
-            matBase = view->GetCamera()->GetTransform().GetT2O() * csXRotMatrix3(3.14f/2.0f);
+            matBase = view->GetCamera()->GetTransform().GetT2O() * billboardFix;
         }
-        mesh->GetMovable()->SetTransform(matBase);
+		if (scale != 1.0f)
+			mesh->GetMovable()->SetTransform(matBase * (1.0f / scale));
+		else
+			mesh->GetMovable()->SetTransform(matBase);
+
         mesh->GetMovable()->UpdateMove();
     }
     else
     {
         currKeyFrame = FindKeyFrameByTime(life);
         nextKeyFrame = currKeyFrame + 1;
-        if (nextKeyFrame >= keyFrames->Length())
+        if (nextKeyFrame >= keyFrames->GetSize())
             nextKeyFrame = 0;
        
         // grab and lerp values
@@ -518,7 +525,7 @@
         }
         else if (dir == DT_BILLBOARD)
         {
-            matBase = view->GetCamera()->GetTransform().GetT2O() * csXRotMatrix3(3.14f/2.0f);
+            matBase = view->GetCamera()->GetTransform().GetT2O() * billboardFix;
             matTransform = matBase;
         }
         else
@@ -528,7 +535,8 @@
         }
 
         // SCALE
-        matTransform *= (1.0f / (LERP_KEY(KA_SCALE) * scale));
+        baseScale = (LERP_KEY(KA_SCALE) * scale);
+        matTransform *= (1.0f / baseScale);
 
         // set new transform
         mesh->GetMovable()->SetTransform(matTransform);
@@ -601,7 +609,7 @@
 
 size_t psEffectObj::FindKeyFrameByTime(float time) const
 {
-    for ( size_t a = keyFrames->Length(); a-- > 0; )
+    for ( size_t a = keyFrames->GetSize(); a-- > 0; )
     {
         if (keyFrames->Get(a)->time < time)
             return a;
@@ -611,7 +619,7 @@
 
 bool psEffectObj::FindNextKeyFrameWithAction(size_t startFrame, size_t action, size_t &index) const
 {
-    for (size_t a = startFrame; a < keyFrames->Length(); a++)
+    for (size_t a = startFrame; a < keyFrames->GetSize(); a++)
     {
         if (keyFrames->Get(a)->specAction.IsBitSet(action))
         {
@@ -657,7 +665,7 @@
         // no matter what the interpolation type (as long as we have one), just clamp the end
         if (lerpTypes[k] != psEffectObjKeyFrame::IT_NONE)
         {
-            for (b = a + 1; b < keyFrames->Length(); ++b)
+            for (b = a + 1; b < keyFrames->GetSize(); ++b)
                 keyFrames->Get(b)->actions[k] = keyFrames->Get(a)->actions[k];
         }
     }
diff -Naur effects.orig/pseffectobjdecal.cpp effects/pseffectobjdecal.cpp
--- src/common/effects.orig/pseffectobjdecal.cpp	1970-01-01 02:00:00.000000000 +0200
+++ src/common/effects/pseffectobjdecal.cpp	2007-02-23 10:40:21.000000000 +0200
@@ -0,0 +1,238 @@
+/*
+* Author: Andrew Robberts
+*
+* Copyright (C) 2003 Atomic Blue (info@planeshift.it, http://www.atomicblue.org)
+*
+*
+* This program is free software; you can redistribute it and/or
+* modify it under the terms of the GNU General Public License
+* as published by the Free Software Foundation (version 2 of the License)
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+*
+*/
+
+#include <psconfig.h>
+
+#include <csutil/xmltiny.h>
+#include <iengine/engine.h>
+#include <iengine/material.h>
+#include <iengine/mesh.h>
+#include <iengine/movable.h>
+#include <iengine/camera.h>
+#include <cstool/csview.h>
+#include <iengine/region.h>
+#include <imesh/objmodel.h>
+#include <csutil/flags.h>
+#include <csgeom/tri.h>
+#include <imesh/nullmesh.h>
+#include <iengine/sector.h>
+
+#include "effects/pseffectobjdecal.h"
+#include "effects/pseffectanchor.h"
+
+#include "util/log.h"
+#include "util/pscssetup.h"
+
+
+#ifdef PS_EFFECT_ENABLE_DECAL
+psEffectObjDecal::psEffectObjDecal(iView * parentView)
+               : psEffectObj(parentView)
+{
+    // get the decal manager
+    decalMgr = csLoadPluginCheck<iDecalManager> (psCSSetup::object_reg, "crystalspace.decal.manager");
+}
+
+psEffectObjDecal::~psEffectObjDecal()
+{
+}
+
+bool psEffectObjDecal::Load(iDocumentNode *node)
+{
+    if (!decalMgr)
+    {
+        csReport(psCSSetup::object_reg, CS_REPORTER_SEVERITY_ERROR, "planeshift_effects", "No decal plugin.\n");
+        return false;
+    }
+    
+    // get the attributes
+    name = "";
+    materialName = "";
+    float polygonNormalThreshold = -0.05f;
+    float decalOffset = 0.02f;
+    csVector2 minTexCoord(0,0);
+    csVector2 maxTexCoord(1,1);
+    bool hasTopClip = true;
+    float topClipScale = 0.5f;
+    bool hasBottomClip = true;
+    float bottomClipScale = 0.5f;
+    float perpendicularFaceThreshold = 0.05f;
+    float perpendicularFaceOffset = 0.01f;
+    
+    csRef<iDocumentAttributeIterator> attribIter = node->GetAttributes();
+    while (attribIter->HasNext())
+    {
+        csRef<iDocumentAttribute> attr = attribIter->Next();
+        csString attrName = attr->GetName();
+        attrName.Downcase();
+        if (attrName == "name")
+            name = attr->GetValue();
+        else if (attrName == "material")
+            materialName = attr->GetValue();
+        else if (attrName == "polygonnormalthreshold")
+            polygonNormalThreshold = attr->GetValueAsFloat();
+        else if (attrName == "decaloffset")
+            decalOffset = attr->GetValueAsFloat();
+    }
+    
+    csRef<iDocumentNode> dataNode = node->GetNode("texCoords");
+    if (dataNode)
+    {
+        minTexCoord.Set(node->GetAttributeValueAsFloat("minU"), node->GetAttributeValueAsFloat("minV"));
+        maxTexCoord.Set(node->GetAttributeValueAsFloat("maxU"), node->GetAttributeValueAsFloat("maxV"));
+    }
+
+    dataNode = node->GetNode("topClip");
+    if (dataNode)
+    {
+        hasTopClip = node->GetAttributeValueAsBool("enabled");
+        topClipScale = node->GetAttributeValueAsFloat("scaleDist");
+    }
+    
+    dataNode = node->GetNode("bottomClip");
+    if (dataNode)
+    {
+        hasBottomClip = node->GetAttributeValueAsBool("enabled");
+        bottomClipScale = node->GetAttributeValueAsFloat("scaleDist");
+    }
+
+    dataNode = node->GetNode("perpendicularFace");
+    if (dataNode)
+    {
+        perpendicularFaceThreshold = node->GetAttributeValueAsFloat("threshold");
+        perpendicularFaceOffset = node->GetAttributeValueAsFloat("offset");
+    }
+    
+    if (name == "")
+    {
+        csReport(psCSSetup::object_reg, CS_REPORTER_SEVERITY_ERROR, "planeshift_effects", "Attempting to create an effect obj with no name.\n");
+        return false;
+    }
+
+    // load material
+    csRef<iMaterialWrapper> mat = region->FindMaterial(materialName);
+    if (!mat)
+    {
+        csReport(psCSSetup::object_reg, CS_REPORTER_SEVERITY_ERROR, "planeshift_effects", "Attempting to create an effect obj with no name.\n");
+        return false;
+    }
+
+    // create decal template
+    decalTemplate = decalMgr->CreateDecalTemplate(mat);
+    decalTemplate->SetPolygonNormalThreshold(polygonNormalThreshold);
+    decalTemplate->SetDecalOffset(decalOffset);
+    decalTemplate->SetTopClipping(hasTopClip, topClipScale);
+    decalTemplate->SetBottomClipping(hasBottomClip, bottomClipScale);
+    decalTemplate->SetTexCoords(minTexCoord, maxTexCoord);
+    decalTemplate->SetPerpendicularFaceThreshold(perpendicularFaceThreshold);
+    decalTemplate->SetPerpendicularFaceOffset(perpendicularFaceOffset);
+    
+    if (!psEffectObj::Load(node))
+        return false;
+    
+    return PostSetup();
+}
+
+bool psEffectObjDecal::Render(const csVector3 &up)
+{
+    static unsigned int uniqueID = 0;
+    csString meshName = "effect_decal_";
+    meshName += uniqueID++;
+    
+    // create a nullmesh as placeholder
+    mesh = engine->CreateMeshWrapper("crystalspace.mesh.object.null", meshName);
+	csRef<iNullMeshState> state =  scfQueryInterface<iNullMeshState> (mesh->GetMeshObject());
+    if (!state)
+    {
+		Error1("No NullMeshState.");
+        return false;
+    }
+	state->SetRadius(1.0);
+
+    // do the up vector
+    objUp = up;
+    csReversibleTransform rt;
+    rt.LookAt(csVector3(up.x, up.z, up.y), csVector3(0,2,1));
+    matUp = rt.GetT2O();
+    matBase = matUp;
+
+    // common flags
+    decalTemplate->SetZBufMode(zFunc);
+    decalTemplate->SetRenderPriority(priority);
+    decalTemplate->SetMixMode(mixmode);
+
+    decal = 0;
+    return true;
+}
+
+bool psEffectObjDecal::Update(csTicks elapsed)
+{
+    if (!anchor || !anchor->IsReady()) // wait for anchor to be ready
+        return true;
+
+    if (!psEffectObj::Update(elapsed))
+        return false;
+
+    float heightScale = 1.0f;
+    if (keyFrames->GetSize() > 0)
+      heightScale = LERP_KEY(KA_HEIGHT);
+
+    const csReversibleTransform t = mesh->GetMovable()->GetFullTransform();
+    const csVector3 newPos = t.GetOrigin();
+    const csVector3 newUp = t.GetFront();
+    const csVector3 newNormal = t.GetUp();
+    const float newWidth = baseScale;
+    const float newHeight = baseScale * heightScale;
+    if (!decal
+        || newPos != pos
+        || newUp != up
+        || newNormal != normal
+        || newWidth != width
+        || newHeight != height)
+    {
+        decal = decalMgr->CreateDecal(decalTemplate, mesh->GetMovable()->GetSectors()->Get(0), newPos, newUp, 
+                newNormal, newWidth, newHeight, decal);
+
+        pos = newPos;
+        up = newUp;
+        normal = newNormal;
+        width = newWidth;
+        height = newHeight;
+    }
+
+    return true;
+}
+
+psEffectObj * psEffectObjDecal::Clone() const
+{
+    psEffectObjDecal * newObj = new psEffectObjDecal(view);
+    CloneBase(newObj);
+
+    newObj->decalMgr = decalMgr;
+    newObj->decalTemplate = decalTemplate;
+    
+    return newObj;
+}
+
+bool psEffectObjDecal::PostSetup()
+{
+    return true;
+}
+
+#endif // PS_EFFECT_ENABLE_DECAL
+
diff -Naur effects.orig/pseffectobjdecal.h effects/pseffectobjdecal.h
--- src/common/effects.orig/pseffectobjdecal.h	1970-01-01 02:00:00.000000000 +0200
+++ src/common/effects/pseffectobjdecal.h	2007-02-23 10:40:21.000000000 +0200
@@ -0,0 +1,64 @@
+/*
+ * Author: Andrew Robberts
+ *
+ * Copyright (C) 2003 Atomic Blue (info@planeshift.it, http://www.atomicblue.org)
+ *
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation (version 2 of the License)
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ *
+ */
+
+#ifndef PS_EFFECT_OBJ_DECAL_HEADER
+#define PS_EFFECT_OBJ_DECAL_HEADER
+
+#include "pseffectobj.h"
+
+//#define PS_EFFECT_ENABLE_DECAL
+
+#ifdef PS_EFFECT_ENABLE_DECAL
+#include <igeom/decal.h>
+
+class psEffectObjDecal : public psEffectObj
+{
+public:
+    psEffectObjDecal(iView *parentView);
+    virtual ~psEffectObjDecal();
+
+    // inheritted function overloads
+    virtual bool Load(iDocumentNode *node);
+    virtual bool Render(const csVector3 &up);
+    virtual bool Update(csTicks elapsed);
+    virtual psEffectObj *Clone() const;
+    
+
+protected:
+
+    /** performs the post setup (after the effect obj has been loaded).
+     *  Things like create mesh factory, etc are initialized here.
+     */
+    virtual bool PostSetup();
+
+    csRef<iDecalManager>    decalMgr;
+    iDecal *                decal;
+    csRef<iDecalTemplate>   decalTemplate;
+
+    // cached values of the current decal so we know if we have to refresh the decal
+    csVector3           pos;
+    csVector3           up;
+    csVector3           normal;
+    float               width;
+    float               height;
+};
+
+#endif // PS_EFFECT_ENABLE_DECAL
+
+#endif
diff -Naur effects.orig/pseffectobj.h effects/pseffectobj.h
--- src/common/effects.orig/pseffectobj.h	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobj.h	2007-02-23 02:44:17.000000000 +0200
@@ -110,7 +110,7 @@
     /** returns the number of keyframes in the group.
      *   @return the keyframe count
      */
-    size_t Length() const
+    size_t GetSize() const
     { return keyFrames.GetSize(); }
 
     /** returns the keyframe at the given index.
@@ -259,7 +259,7 @@
      *   @return the keyFrame count
      */
     size_t GetKeyFrameCount() const
-    { return keyFrames->Length(); }
+    { return keyFrames->GetSize(); }
 
     /** returns the keyframe at the given index.
      *   @param idx the index of the keyframe to grab
@@ -329,6 +329,8 @@
     
     float birth;
     bool isAlive;
+    float baseScale;
+
 
     csZBufMode zFunc;
     long priority;
diff -Naur effects.orig/pseffectobjmesh.cpp effects/pseffectobjmesh.cpp
--- src/common/effects.orig/pseffectobjmesh.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobjmesh.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -129,7 +129,7 @@
     if (!psEffectObj::Update(elapsed))
         return false;
 
-    if (keyFrames->Length() == 0)
+    if (keyFrames->GetSize() == 0)
         return true;
     
     // COLOUR
diff -Naur effects.orig/pseffectobjparticles.cpp effects/pseffectobjparticles.cpp
--- src/common/effects.orig/pseffectobjparticles.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobjparticles.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -144,7 +144,7 @@
     if (!psEffectObj::Update(elapsed))
         return false;
 
-    if (keyFrames->Length() == 0)
+    if (keyFrames->GetSize() == 0)
         return true;
     
     // do stuff here
diff -Naur effects.orig/pseffectobjquad.cpp effects/pseffectobjquad.cpp
--- src/common/effects.orig/pseffectobjquad.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobjquad.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -143,7 +143,7 @@
         return false;
 
     float halfHeightScale = 0.5f;
-    if (keyFrames->Length() > 0)
+    if (keyFrames->GetSize() > 0)
     {
         // COLOUR
         csVector3 lerpColour = LERP_VEC_KEY(KA_COLOUR);
@@ -189,8 +189,8 @@
       return false;
 
     animLength = 10;
-    if (keyFrames->Length() > 0)
-        animLength += keyFrames->Get(keyFrames->Length()-1)->time;
+    if (keyFrames->GetSize() > 0)
+        animLength += keyFrames->Get(keyFrames->GetSize()-1)->time;
 
     return true;
 }
diff -Naur effects.orig/pseffectobjsimpmesh.cpp effects/pseffectobjsimpmesh.cpp
--- src/common/effects.orig/pseffectobjsimpmesh.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobjsimpmesh.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -133,7 +133,7 @@
     if (!psEffectObj::Update(elapsed))
         return false;
     
-    if (keyFrames->Length() == 0)
+    if (keyFrames->GetSize() == 0)
         return true;
     
     // do stuff here
diff -Naur effects.orig/pseffectobjsound.cpp effects/pseffectobjsound.cpp
--- src/common/effects.orig/pseffectobjsound.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobjsound.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -211,11 +211,11 @@
 
     csVector3 soundPos = anchorMesh->GetMovable()->GetPosition();
 
-    if (keyFrames->Length() > 0)
+    if (keyFrames->GetSize() > 0)
     {
         currKeyFrame = FindKeyFrameByTime(life);
         nextKeyFrame = currKeyFrame + 1;
-        if (nextKeyFrame >= keyFrames->Length())
+        if (nextKeyFrame >= keyFrames->GetSize())
             nextKeyFrame = 0;
 
         // position
diff -Naur effects.orig/pseffectobjspire.cpp effects/pseffectobjspire.cpp
--- src/common/effects.orig/pseffectobjspire.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobjspire.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -163,7 +163,7 @@
     float height = 1;
     float padding = 1;
 
-    if (keyFrames->Length() > 0)
+    if (keyFrames->GetSize() > 0)
     {
         // COLOUR
         csVector3 lerpColour = LERP_VEC_KEY(KA_COLOUR);
@@ -334,8 +334,8 @@
     CalculateData(shape, segments, facState->GetVertices(), facState->GetTexels());
 
     animLength = 10;
-    if (keyFrames->Length() > 0)
-        animLength += keyFrames->Get(keyFrames->Length()-1)->time;
+    if (keyFrames->GetSize() > 0)
+        animLength += keyFrames->Get(keyFrames->GetSize()-1)->time;
 
     // create the tris
     switch (shape)
diff -Naur effects.orig/pseffectobjstar.cpp effects/pseffectobjstar.cpp
--- src/common/effects.orig/pseffectobjstar.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobjstar.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -150,7 +150,7 @@
 
     csVector3 lerpColour = csVector3(1,1,1);
     float lerpAlpha = 1;
-    if (keyFrames->Length() > 0)
+    if (keyFrames->GetSize() > 0)
     {
         // COLOUR
         lerpColour = LERP_VEC_KEY(KA_COLOUR);
@@ -263,8 +263,8 @@
     }
 
     animLength = 10;
-    if (keyFrames->Length() > 0)
-        animLength += keyFrames->Get(keyFrames->Length()-1)->time;
+    if (keyFrames->GetSize() > 0)
+        animLength += keyFrames->Get(keyFrames->GetSize()-1)->time;
 
     facState->SetTriangleCount(2*segments);
     for (int q=0; q<segments; ++q)
diff -Naur effects.orig/pseffectobjtrail.cpp effects/pseffectobjtrail.cpp
--- src/common/effects.orig/pseffectobjtrail.cpp	2007-03-12 00:00:03.000000000 +0200
+++ src/common/effects/pseffectobjtrail.cpp	2007-02-23 02:44:17.000000000 +0200
@@ -211,11 +211,11 @@
     float height = 1.0f;
     alpha = 1.0f;
 
-    if (keyFrames->Length() > 0)
+    if (keyFrames->GetSize() > 0)
     {
         currKeyFrame = FindKeyFrameByTime(life);
         nextKeyFrame = currKeyFrame + 1;
-        if (nextKeyFrame >= keyFrames->Length())
+        if (nextKeyFrame >= keyFrames->GetSize())
             nextKeyFrame = 0;
        
         // grab and lerp values
@@ -346,8 +346,8 @@
     }
 
     animLength = 10;
-    if (keyFrames->Length() > 0)
-        animLength += keyFrames->Get(keyFrames->Length()-1)->time;
+    if (keyFrames->GetSize() > 0)
+        animLength += keyFrames->Get(keyFrames->GetSize()-1)->time;
 
     facState->SetTriangleCount(4*segments);
     for (int q=0; q<segments; ++q)

--- src.orig/client/entitylabels.cpp	2007-03-12 00:00:01.000000000 +0200
+++ src/client/entitylabels.cpp	2007-03-17 02:34:12.000000000 +0200
@@ -257,11 +257,21 @@
         return;
     }
 
+	size_t nameCharCount = nameRow.text.Length();
+	size_t guildCharCount = guildRow.text.Length();
+	size_t maxCharCount = nameCharCount > guildCharCount ? nameCharCount : guildCharCount;
+	float scale = sqrt((float)maxCharCount) / 4.0f;
+
     // Finally set the text, with a black outline
     if (guildRow.text.Length())
-        txt->SetText(2, &nameRow, &guildRow );
+	{
+        txt->SetText(2, &nameRow, &guildRow);
+		scale *= 1.5f;
+	}
     else
-        txt->SetText(1, &nameRow );
+        txt->SetText(1, &nameRow);
+
+	txt->SetScaling(scale, 1.0f);
 }
 
 void psEntityLabels::CreateLabelOfObject(GEMClientObject *object)

--- data.orig/effects/misc/entitylabel.eff	2007-03-11 23:59:53.000000000 +0200
+++ data/effects/misc/entitylabel.eff	2007-03-17 02:27:43.000000000 +0200
@@ -1,25 +1,15 @@
 <?xml version="1.0" encoding="utf-8" ?> 
 <library>
-    <textures>
-        <texture name="marker">
-            <file>/this/art/effects/marker01.dds</file>
-        </texture>
-    </textures>
-    <materials>
-        <material name="marker">
-            <texture>marker</texture>
-        </material>
-    </materials>
     <addon plugin="PSEffects">
         <effect name="entitylabel">
             <anchor type="basic" name="pos">
                 <dir>none</dir>
             </anchor>
-            <obj type="text" name="left" fontquality="44">
+            <obj type="text" name="label" fontquality="44">
                 <mixmode>copy</mixmode>
                 <attach>pos</attach>
                 <death>none</death>
-                <dir>camera</dir>
+                <dir>billboard</dir>
             </obj>
         </effect>
     </addon>
