diff -ur msmtp-1.4.13.orig/src/conf.c msmtp-1.4.13/src/conf.c
--- msmtp-1.4.13.orig/src/conf.c	2007-07-31 00:41:09.000000000 +0300
+++ msmtp-1.4.13/src/conf.c	2008-02-15 16:06:45.000000000 +0200
@@ -31,6 +31,7 @@
 #include <strings.h>
 #include <ctype.h>
 #include <errno.h>
+#include <locale.h>
 
 #include "gettext.h"
 #include "xalloc.h"
@@ -272,6 +273,8 @@
 {
     size_t l, i;
 
+    char *locale_data = setlocale(LC_CTYPE, "");
+
     if (*arg == '\0')
     {
 	return 0;
@@ -285,10 +288,23 @@
 	    || strcmp(arg, "ntlm") == 0)
     {
     	l = strlen(arg);
+	/*
+	 * Turkish has 4 letter "I"s. English has only two, a lowercase dotted i and an
+	 * uppercase dotless I. Turkish has lowercase and uppercase forms of both dotted
+	 * and dotless I. So tolower(I) != i and toupper(i) != I for Turkic languages.
+	 *
+	 * AUTH values are all defined in English, so use C locale for locale independent conversions
+	 * else msmmtp fails like following;
+	 * msmtp: support for authentication method LOGiN is not compiled in
+	 *
+	 * For more details see: http://www.i18nguy.com/unicode/turkish-i18n.html
+	 */
+	setlocale(LC_CTYPE, "C");
 	for (i = 0; i < l; i++)
 	{
 	    arg[i] = toupper((unsigned char)arg[i]);
 	}
+	setlocale(LC_CTYPE, locale_data);
 	return 0;
     }
     else
@@ -309,6 +325,7 @@
     int count;
     size_t i;
     size_t l;
+    char *locale_data = setlocale(LC_CTYPE, "");
 
     if (strcmp(arg, "never") != 0)
     {
@@ -339,10 +356,21 @@
 	}
     }
     l = strlen(arg);
-    for (i = 0; i < l; i++)
-    {
-	arg[i] = toupper((unsigned char)arg[i]);
-    }
+   /*
+    * Turkish has 4 letter "I"s. English has only two, a lowercase dotted i and an
+    * uppercase dotless I. Turkish has lowercase and uppercase forms of both dotted
+    * and dotless I. So tolower(I) != i and toupper(i) != I for Turkic languages.
+    *
+    * DNS_NOTIFY values are all defined in English, so use C locale for locale independent conversions
+    *
+    * For more details see: http://www.i18nguy.com/unicode/turkish-i18n.html
+    */
+    setlocale(LC_CTYPE, "C");
+    for (i = 0; i < l; i++)
+    {
+	arg[i] = toupper((unsigned char)arg[i]);
+    }
+    setlocale(LC_CTYPE, locale_data);
     return 0;
 }
 
